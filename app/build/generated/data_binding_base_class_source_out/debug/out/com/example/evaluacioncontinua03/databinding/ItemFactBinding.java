// Generated by view binder compiler. Do not edit!
package com.example.evaluacioncontinua03.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.evaluacioncontinua03.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemFactBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final CardView cvItemFact;

  @NonNull
  public final TextView txtContentFact;

  @NonNull
  public final TextView txtCreatedonFact;

  @NonNull
  public final TextView txtFactTitle;

  @NonNull
  public final TextView txtLablesFact;

  private ItemFactBinding(@NonNull CardView rootView, @NonNull CardView cvItemFact,
      @NonNull TextView txtContentFact, @NonNull TextView txtCreatedonFact,
      @NonNull TextView txtFactTitle, @NonNull TextView txtLablesFact) {
    this.rootView = rootView;
    this.cvItemFact = cvItemFact;
    this.txtContentFact = txtContentFact;
    this.txtCreatedonFact = txtCreatedonFact;
    this.txtFactTitle = txtFactTitle;
    this.txtLablesFact = txtLablesFact;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemFactBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemFactBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_fact, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemFactBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      CardView cvItemFact = (CardView) rootView;

      id = R.id.txt_content_fact;
      TextView txtContentFact = ViewBindings.findChildViewById(rootView, id);
      if (txtContentFact == null) {
        break missingId;
      }

      id = R.id.txt_createdon_fact;
      TextView txtCreatedonFact = ViewBindings.findChildViewById(rootView, id);
      if (txtCreatedonFact == null) {
        break missingId;
      }

      id = R.id.txt_fact_title;
      TextView txtFactTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtFactTitle == null) {
        break missingId;
      }

      id = R.id.txt_lables_fact;
      TextView txtLablesFact = ViewBindings.findChildViewById(rootView, id);
      if (txtLablesFact == null) {
        break missingId;
      }

      return new ItemFactBinding((CardView) rootView, cvItemFact, txtContentFact, txtCreatedonFact,
          txtFactTitle, txtLablesFact);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
